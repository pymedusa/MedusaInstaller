image: Visual Studio 2017
version: '{build}'
max_jobs: 1
clone_depth: 5

pull_requests:
  do_not_increment_build_number: true
skip_tags: true
only_commits:
  files:
    - Medusa.iss
    - seed.ini
    - idp/**
    - assets/**
    - utils/**
    - appveyor.yml

install:
  - ps: choco install -y --no-progress InnoSetup

before_build:
  - ps: |-
      $env:InstallerVersion = Select-String -Path .\Medusa.iss `
        -Pattern '^#define\sInstallerVersion\s([\d]+)' | `
        % { $($_.matches.groups[1]).Value };

  - ps: |-
      $env:SeedVersion = Select-String -Path .\seed.ini `
        -Pattern '^Version=([\d]+)' | `
        % { $($_.matches.groups[1]).Value };

  - ps: |-
      If ( `
        $env:InstallerVersion -ne $env:SeedVersion `
        -and $env:APPVEYOR_REPO_BRANCH -eq "master" `
        # -and -not $env:APPVEYOR_PULL_REQUEST_NUMBER `
      ) { `
        $message = "Seed version differs from version in source code!";
        $details = `
          "`tVersion in source code: $env:InstallerVersion`n" + `
          "`tVersion in seed file:   $env:SeedVersion`n" + `
          "Make sure to update the value before pushing to master.";
        Add-AppveyorMessage `
          -Message "$message" `
          -Category Warning `
          -Details "$details"; `
        Write-Warning "$message`n$details" `
      }

  - ps: |-
      $env:ReleaseVersion = Select-String -Path .\Medusa.iss `
        -Pattern '^#define\sMedusaInstallerVersion\s"v([\d.]+)"' | `
        % { $($_.matches.groups[1]).Value };

build_script:
  # Set output file to: "Output\MedusaInstaller-[commit_hash[:7]].exe"
  - ps: $env:OutputFile = "MedusaInstaller-" + $env:APPVEYOR_REPO_COMMIT.Substring(0, 7);
  - ps: '& "${env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe" /O"Output" /F"$env:OutputFile" /Q Medusa.iss;'
  - ps: $env:InstallerFile = "Output\${env:OutputFile}.exe";

test: off

notifications:
  - provider: GitHubPullRequest
    template: >
      {{#passed}}:white_check_mark:{{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})
      {{#jobs}}{{#artifacts}}<br><b>Artifact:</b> [{{fileName}}]({{permalink}}) ({{size}} bytes){{/artifacts}}{{/jobs}}
      <p>Build messages:</p>
      <ul>
      {{#jobs}}
        {{#messages}}
          <li>:warning: {{message}}<br>
            {{details}}
          </li>
        {{/messages}}
      {{/jobs}}
      </ul>

artifacts:
  - path: $(InstallerFile)
    name: MedusaInstaller-$(ReleaseVersion).exe

environment:
  GH_TOKEN:
    secure: epQRjuQ/hfy8BkTBL3NYVnmkFnsVlYEDKX5XB7RcY2Ort3Fo2sXX8LZdW+sNyRa3

before_deploy:
  - ps: |-
      If ($env:InstallerVersion -ne $env:SeedVersion) `
      { `
        $message = "Seed version differs from version in source code!";
        $details = `
          "`tVersion in source code: $env:InstallerVersion`n" + `
          "`tVersion in seed file:   $env:SeedVersion`n" + `
          "You must to update the value before releasing.";
        Add-AppveyorMessage `
          -Message "$message" `
          -Category Error `
          -Details "$details"; `
        throw "$message`n$details" `
      }

  - ps: |-
      $headers = @{
        "Authorization" = "Bearer $env:GH_TOKEN"
        "Content-type" = "application/json"
      }; `
      $LatestGitHubRelease = Invoke-RestMethod `
        -Uri "https://api.github.com/repos/$env:APPVEYOR_REPO_NAME/releases/latest" `
        -Headers $headers `
        -Method GET; `
      If ( `
        $env:ReleaseVersion -eq $LatestGitHubRelease.tag_name `
        -and -not $LatestGitHubRelease.draft `
      ) { `
        Write-Warning "Not deploying because release $env:ReleaseVersion is already published."; `
        Exit-AppveyorBuild `
      }

deploy:
  - provider: GitHub
    tag: $(ReleaseVersion)
    release: Release $(ReleaseVersion)
    force_update: true         # replaces current release
    draft: true                # release as a draft
    auth_token: $(GH_TOKEN)
    artifact: MedusaInstaller-$(ReleaseVersion).exe
    on:
      branch: master           # release from master branch only
